<?xml version="1.0" encoding="UTF-8"?>
<?mso-application progid="Excel.Sheet"?>
<Workbook xmlns:c="urn:schemas-microsoft-com:office:component:spreadsheet" xmlns:html="http://www.w3.org/TR/REC-html40" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns:x2="http://schemas.microsoft.com/office/excel/2003/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:schemas-microsoft-com:office:spreadsheet">
  <Styles>
    <Style ss:ID="cellShortDate">
      <NumberFormat ss:Format="Short Date" />
    </Style>
    <Style ss:ID="header">
      <Font ss:Bold="1" />
    </Style>
    <Style ss:ID="paragraph">
      <Alignment ss:WrapText="1" />
    </Style>
  </Styles>
  <ss:Worksheet ss:Name="Active">
    <Table>
      <Column ss:Width="25" />
      <Column ss:Width="300" />
      <Column ss:Width="60" />
      <Column ss:Width="60" />
      <Column ss:Width="60" />
      <Row>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Id</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Description</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Status</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Category</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Created</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">104</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">REMINDER:
DataFiles currently does not have automated documentation
because I can set an alias for NuGet WithoutHaste.DataFiles within the *.csproj file, but command line msbuild ignores that and has no command line option to replace it

so it gets ambiguous calls between the current project WithoutHaste.DataFiles and the referenced WithoutHaste.DataFiles.

possible solution:
make a standalone project that will run the documentation for DataFiles and save it into DataFile's documentation folder
- the drawback is that this will not run automatically whenever DataFiles is built</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">51</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">Assembly.LoadFrom
catch BadImageFormatException, give message about which frameworks are supported
- add test case
--hmm it isn't throwing an error for the test

- did run into this during a different test, and the error message came through correctly</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-05T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">83</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">99</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">http://geekswithblogs.net/robz/archive/2011/07/15/extend-nuget-command-line.aspx
Can nuget.exe be extended to support full package installation from command line?
OR will dotnet add package command do it? in Developer Prompt?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">24</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">what is the right design for protecting list data in objects while also making the contents available?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">62</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">what is .Net Core vs .Net Framework?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">84</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">106</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">Setting:
default to including documentation for public and protected things that are NOT commented
with option to only include documentation for commented things</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-04T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">107</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">Setting: Maybe:
default to sorting things into alphabetical order
with option (per project and per object?) to keep the same order as the actual code because it is in a logical order</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-04T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">105</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">Breaking Change Proposal:
can I use an Interface instead of Func&lt;&gt; to let users create custom display logic for QualifiedNames?

Benefits:
- Consistent DotNetSettings behavior across target frameworks
- My EarlyDocs Test documentation could all use the same set of NameConverters, so I wouldn't need to maintain multiple sets of Oracle Documentation
-- with just the one Extensions test being different across target frameworks, I could have just the differences saved in the other folders, and copy them in over the default OracleDocumentation - make it clear what is different</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-04T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">16</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">support markdown "reference-style links"
ex:
[I'm a reference-style link][Arbitrary case-insensitive reference text]
[You can use numbers for reference-style link definitions][1]
Or leave it empty and use the [link text itself].

[arbitrary case-insensitive reference text]: https://www.mozilla.org
[1]: http://slashdot.org
[link text itself]: http://www.reddit.com</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-19T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">15</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">load markdown from file</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-19T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">19</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">VS Documentation: support everything on
https://docs.microsoft.com/en-us/dotnet/csharp/codedoc</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-21T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">20</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">Markdown: support everything on
https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-21T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">29</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">DotNet/DotNetQualifiedClassName.SetMisplacedGenericParameters
see comments
reveals problem in object structure
i think the same one as have ReturnType as a Parameter</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-26T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">34</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">DotNet:
could turn DotNetSettings.QualifiedNameConverter into a list or event so that any number can be stacked</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-10-22T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">77</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">DotNet:
refactor all the the indexof and substring in figuring out type names
make one object that can regex break apart all those names into their parts</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">28</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">Separate Assembly utilities to new library WithoutHaste.ReflectionHelper (or something)
- DotNet.Utilities attribute methods
- TypeInfo convert name to documentation format ?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Maybe</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
      </Row>
    </Table>
    <x:WorksheetOptions />
  </ss:Worksheet>
  <ss:Worksheet ss:Name="Inactive">
    <Table>
      <Column ss:Width="25" />
      <Column ss:Width="300" />
      <Column ss:Width="60" />
      <Column ss:Width="60" />
      <Column ss:Width="60" />
      <Column ss:Width="60" />
      <Row>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Id</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Description</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Status</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Category</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Created</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Done</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">37</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">publish as its own NuGet package</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">5</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">release Version 1.0.0 - Initial Release on GitHub</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-14T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">78</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">documentation:
After EarlyDocs is published and reinstalled in DataFiles:

note the few difference between target frameworks
- 2.0/3.0 can toggle QualifiedNameConverter on and off with a method
- or should I have one folder for 2.0 docs and one for 4.5.2 docs so that I can link to each for pre/post 3.5 differences?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">101</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">GitHub: 
update installation instructions
save release 1.0.0</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">100</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">package full version 1.0.0
run local installation tests
- net20 installed right files, gave right output - DONE
- net40 installed right files, gave right output - DONE

publish full version 1.0.0
run full installation tests
- net20 installed right files, gave right output - DONE
- net30 installed right files, gave right output - DONE
- net35 installed right files, gave right output - DONE
- net40 installed right files, gave right output - DONE
- net45 installed right files, gave right output - DONE
- net46 installed right files, gave right output - DONE
- net47 installed right files, gave right output - DONE
- net451 installed right files, gave right output - DONE
- net452 installed right files, gave right output - DONE
- net461 installed right files, gave right output - DONE
- net462 installed right files, gave right output - DONE
- net471 installed right files, gave right output - DONE
- net472 installed right files, gave right output - DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">94</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">msbuild sometimes ignoring TargetFrameworkVersion
- posted question on StackOverflow
https://stackoverflow.com/questions/55433661/why-does-msbuild-sometimes-ignore-targetframeworkversion</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-30T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">98</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">adding a Clean command before Rebuild miiiiight have fixed the msbuild targeting error
except net35 is now target v2.0 instead of v4.0 which seeeems to result in it looking for a missing LINQlone library when you run it
wait, my notes say having net35 ImageRuntimeVersion v2.0 is correct

yeah, seems to be working
- update stackoverflow - DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-02T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">61</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">verify EarlyDocs works with multi-targeting and this library
before fully publishing this library to NuGet</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">97</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">would putting a timeout between build commands stop the weird "wrong target" behavior?
NOPE
used "timeout 2" between each build
and it's building everything to v4.0 again</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-02T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-02T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">95</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">update nuspec to use Markdown style links
- turns out that is not supported</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-01T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-02T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">96</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">not getting protected or private get/set methods on properties
- compile into alpha4 and publish it</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-02T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-02T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">92</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">manually testing installation of alpha3 from local source to local InstallationTests
2.0 - from local - all good - DONE
3.0 - from published - all good - DONE
3.5 - from published - just the one library - DONE
4.0 - from local - just the one library - DONE
4.5 - from published - just the one library - DONE
4.6 - from published - just the one library - DONE
4.7 - from published - just the one library - DONE
4.5.2 - from published - just the one library - DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-29T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-04-01T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">93</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">maybe if I put empty Dependency Groups into the nuspec for each framework that doesn't need anything extra installed, it will work right?
and now it's back to compiling with the wrong target framework</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-29T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-30T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">88</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">automate testing of installing NuGet package from local source and running tests on it
- write a console app for this part
--- remove old autogenerated tests
--- generate new autogenerated tests
- install nuget package from published alpha version
- build each project
- run each project

--well, nuget is downloading LINQlone/etc no matter what, but not updating any references
---oh, as the documentation says the project file will not updated from command-line
https://docs.microsoft.com/en-us/nuget/tools/nuget-exe-cli-reference</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-21T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-29T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">91</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">update project to always use AssemblyName "WithoutHaste.DataFiles" for all project versions
and to compile them into Release/net20/WithoutHaste.dll sort of folders
- it is important that they all have the same AssemblyName, and probably file name, too</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-29T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-29T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">90</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">make Alpha release
- make sure all text is up to date - DONE
- update version number in *.nuspec - DONE
- pack with code signing - DONE
- publish to NuGet - PENDING - DONE
- update github readme with link to NuGet - DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-26T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-26T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">89</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">manual test:
install DataFiles NuGet package from local source
+ it auto-installed LINQLone for a 2.0 project
+ it auto-installed System.Xml.Linq for a 2.0 project
+ it auto-installed every version of DataFiles, so I assume the project will find the version it needs</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-21T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-21T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">87</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">create a multi-target NuGet package</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-21T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-21T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">86</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">merge port-to-net-20 back into master</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-20T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">18</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">update repository summary</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">50</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">note WithoutHaste.DataFiles dependency on:
LINQlone NuGet library
System.Xml.Linq NuGet library
for just the target frameworks that need them</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-04T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">85</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">update DataFiles README list of dependencies</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">76</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">full list of features: what .Net constructs can be deciphered by this library
Markdown, too
EarlyDocs can point at it</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">33</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">markdown
? rename method ToMarkdown() to ToMarkdownString() ?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-10-01T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">75</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">add test cases for encoded "&lt;" within plain text in xml</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-14T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">57</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">add test cases for double quotes in XElement attribute value</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">82</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">update main test project so it has the right DATAFILES_TARGET constant
and update creation of derived projects to replace that with their own</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">80</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">clear warnings from DataFilesTest about unused events and such</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">81</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">add remarks to batch files with "REM "</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">79</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">.Net 2.0 test ran ok
try .Net 3.0 - working
try .Net 3.5 - working
try .Net 4.0 - working
try .Net 4.5 - working
some tests pass in VS but fail from command prompt because of "current directory"
- fixing that
that fixed all the remaining errors!</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">73</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">can I get a shorter summary from running mstest? with full info to logs still?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Skip</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">53</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">solve all current Test errors
in net20.sln
then try running all the tests again</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-15T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">60</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">can I automate running Test against each target framework?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">59</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">manually run Test against each possible target of DataFiles</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">58</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">how to build a multi-targeted dll?
or do I need to compile once per target?
get this working for DataFiles</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">56</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">in Test and DataFiles:
optionally target System.Core and System.Xml.Linq instead of NuGet libraries
when target framework is high enough</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">55</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">in Test: update commented out tests to check for which target framework is being used
! Test project must target 3.5 or higher</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">72</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">DataFiles/Properties/Assembly.cs
marked all the DataFilesTest.netXX assemblies as "can see internals"</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">71</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">move testing of Excel to its own project
so it can be on its own target framework</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">70</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">building DataFiles
4.0 cannot targer System.Linq ?
fixed it - System.Core includes namespace System.Linq, there is no System.Linq.dll to reference</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">69</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">installing framework .Net 4.6.2 on PC
installing framework .Net 4.7 on PC
.Net 4.7.1 seems to work
installing framework .Net 4.7.2 on PC
https://docs.microsoft.com/en-us/dotnet/framework/install/guide-for-developers</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-12T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">66</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">script to compile all targeted versions of DataFiles</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-10T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-10T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">67</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">remove .Net 6.0 Null Conditional operators from code base
"object?.attribute"</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-10T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-10T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">65</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">? create T4 in DataFiles project that will read in DataFiles.csproj and output a csproj for each target framework
- save to same directory
- name like DataFiles.net20.csproj
- update &lt;TargetFrameworkVersion&gt; line
- update References - Nuget packages or core packages
- update EarlyDocs - just for the highest framework
? then write a command line script to compile each of these
- name like WithoutHaste.DataFiles.net20.dll
- save to normal output directory</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-10T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">64</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">installing VS 2017 Community
- it was already installed but I wasn't using it</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">63</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">update version number
- never mind, zero releases so far so still on version 1.0.0</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Skip</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">54</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">get .csproj Import working for DefineConstants
move them into a reusable .targets file
use this for WithoutHaste.DataFiles and for Test</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">49</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">can it be ported to .Net 2.0?
created branch "port-to-dotnet-2.0"
ignoring DataFiles.Excel - it is in its own project already
installing LINQlone to replace System.Linq
https://www.nuget.org/packages/LINQlone/

https://www.nuget.org/packages/System.Xml.Linq/
this might be same thing for System.Xml.Linq
installing it to test
looks ok so far

System.Reflection.TypeInfo - 4.5 minimum
testing the 2.0 version capabilities in temp project

Assembly.LoadFrom: BadImageFormatException
"Could not load file or assembly 'file:///E:\GitHub\EarlyDocs\Test\bin\Debug\Test.dll' or one of its dependencies. This assembly is built by a runtime newer than the currently loaded runtime and cannot be loaded."

maybe System.Reflection can only load dll's compiled with lower or equal versions of .Net?
yeah, it works fine loading a 2.0 library, but fails on 4.5.2
THEREFORE
I will need multiple compiled versions of WithoutHaste.DataFiles
a 2.0 version, and a 4.5 version at least (ideally, compiled for every .Net version)

big difference between Reflection versions:
"TypeInfo" is not in 2.0

left off at https://stackoverflow.com/questions/3436526/detect-target-framework-version-at-compile-time
for conditional compilation of extension method handling
and
https://stackoverflow.com/questions/38476796/how-to-set-net-core-in-if-statement-for-compilation
and
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-if
and
https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget

Func type is not in .Net 2.0 either
LINQlone does define it, but I don't want users to have to install LINQlone
and DotNetSettings.QualifiedNameConverter is a Func
Func is in .Net 3.5 and higher</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-04T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">52</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">DotNet/Utilities
"string innerText = String.Concat(parent.Nodes());"
does not work in NuGet System.Xml.Linq
no link from NuGet to any documentation, and it isn't a GitHub project
- wrote my own ToString function
- also sent query to NuGet owners about bug, but project hasn't been updated in 4 years so may never get a response
-- don't see a "b0at" owned "System.Xml.Linq in Github</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-05T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2019-03-06T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">48</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">bug: generic types (field type, parameter type, etc) not displaying correctly

structural issue

decisions:
1) either you've loaded just the VS XML or you've loaded both that and the Assembly info
1A) if just the VS XML, there are no generic type aliases; the defaults will be used all over
1B) if both, then all generic type aliases have been loaded

changes:
1) remove "ResolveGenericTypeNameConflicts" as it is unnecessary
2) default all generic types (field type, parameter type, etc) to using the default aliases when they are first created from VS XML
3) if method assembly info is loaded, push the updated aliases to the method parameters
4) if type assembly info is loaded, push the updated aliases to fields, properties, indexers and indexer parameters, events, and method parameters.

testing:
- type of field
- type of property
- type of parameter of indexer
- type of event
- return type of method (to class or to method)
- type of parameter of method (to class or to method)</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-10T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-11T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">46</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">Move Excel namespace to its own project in the solution
- recompile DataFiles and EarlyDocs without Excel in it
- update DataFiles and add to DataFiles.Excel
- rerun documentation</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-03T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">45</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">Analysis of dependencies:
DataFiles
 - System.*
DataFiles.Excel
 - EPPlus
 - System.*
DataFiles.Markdown
 - System.*
DataFiles.DotNet
 - DataFiles.TextHelper
 - System.*
EarlyDocs
 - DataFiles.Counters
 - DataFiles.DotNet
 - DataFiles.Markdown

Therefore, it makes sense to move Excel to its own project, because it depends on a third-party library.

And it makes sense to keep the rest together because they rely on each other (somewhat), and EarlyDocs relies on all of them.</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-02T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-03T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">14</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">re-run EarlyDocs on this
- installing local test NuGet package</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-19T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-02T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">44</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">verify documentation: DotNet namespace
enums
- AccessModifier DONE
- CommentTag DONE
- FieldCategory DONE
- MethodCategory DONE
- ParameterCategory DONE
- TypeCategory DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-01T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-02T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">43</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">verify documentation: DotNet namespace
constructs
- DotNetBaseType DONE
- DotNetDelegate DONE
- DotNetDocumentationFile DONE
- DotNetEvent DONE
- DotNetField DONE
- DotNetIndexer DONE
- DotNetMember DONE
- DotNetMethod DONE
- DotNetMethodConstructor DONE
- DotNetMethodDestructor DONE
- DotNetMethodOperator DONE
- DotNetParameter DONE
- DotNetProperty DONE
- DotNetPropertyMethod DONE
- DotNetQualifiedClassName DONE
- DotNetQualifiedClassNameTreeNode DONE
- DotNetQualifiedMethodName DONE
- DotNetQualifiedName DONE
- DotNetQualifiedTypeName DONE
- DotNetReferenceClassGeneric DONE
- DotNetReferenceGeneric DONE
- DotNetReferenceMethodGeneric DONE
- DotNetSettings DONE
- DotNetType DONE
- IDotNetCommentLink DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-01T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-02T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">42</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">verify documentation: DotNet namespace
comments
- DotNetComment DONE
- DotNetCommentCell DONE
- DotNetCommentCode DONE
- DotNetCommentCodeBlock DONE
- DotNetCommentDuplicate DONE
- DotNetCommentGroup DONE
- DotNetCommentInherit DONE
- DotNetCommentLinkedGroup DONE
- DotNetCommentList DONE
- DotNetCommentListItem DONE
- DotNetCommentMethodLink DONE
- DotNetCommentMethodLinkedGroup DONE
- DotNetCommentParameter DONE
- DotNetCommentParameterLink DONE
- DotNetCommentQualifiedLink DONE
- DotNetCommentQualifiedLinkedGroup DONE
- DotNetCommentRow DONE
- DotNetCommentTable DONE
- DotNetCommentText DONE
- DotNetCommentTypeParameter DONE
- DotNetCommentTypeParameterLink DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-01T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">41</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">verify documentation: Markdown namespace
- MarkdownCode DONE
- MarkdownCodeBlock DONE
- MarkdownFile DONE
- MarkdownInlineLink DONE
- MarkdownLine DONE
- MarkdownList DONE
- MarkdownParagraph DONE
- MarkdownSection DONE
- MarkdownTable DONE
- MarkdownTableRow DONE
- MarkdownText DONE
- MarkdownLink DONE
- IMarkdownInLine DONE
- IMarkdownInList DONE
- IMarkdownInSection DONE
- IMarkdownIsBlock DONE
- TextStyle DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-12-01T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">40</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">verify documentation: DataFiles namespace
- AlphabetCounter DONE
- TextHelper DONE
- XmlDocumentHelper DONE
- ArbitraryCounter DONE
- StringFormatException DONE
- XmlFormatException DONE
- XmlNodeException DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-29T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">39</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">verify documentation: Excel namespace
- MSExcel2003XmlFile DONE
- ExcelPackageHelper DONE</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-29T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">13</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">update ReadMe with MarkDown feature and version notes</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-19T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">31</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">documentation:
see https://www.nuget.org/packages/EPPlus/ for example (bottom of page) of how to list dependencies</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-26T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">38</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">can I remove dependencies to anything above .Net 2.0?
-System.Linq depends on .Net 3.5
-LINQBridge is a .Net 2.0 implementation of LINQ
do I want a dependency on that?
how about targeting .Net 3.5 instead of .Net 2.0? that's still an improvement on .Net 4.5.2
---
System.Reflection.TypeInfo is only available in .Net 4.5
and is critical to the DotNet functionality
so rolling back changes and leaving project at Net 4.5.2</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Skip</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">36</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">remove any dependency on WithoutHaste.Libraries
- removing Info class
- Info.GetVersion()
- Info.GetDependencyVersions()
since this data should be available in the NuGet package</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">35</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">extend support for CommentTag enum</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-03T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">12</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">build and save markdown file</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-19T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">32</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">markdown
? bold or italic styles as decoractor/wrapper classes ?</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-29T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-11-20T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">21</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">verify EPPlus license - can I use in it free software?

https://www.nuget.org/packages/EPPlus/
links to license GNU Lesser General Public License  https://www.gnu.org/licenses/lgpl-3.0.en.html

description from Github:
Permissions of this copyleft license are conditioned on making available complete source code of licensed works and modifications under the same license or the GNU GPLv3. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 

THIS PART
However, a larger work using the licensed work through interfaces provided by the licensed work may be distributed under different terms and without source code for the larger work.

so I should be ok</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-22T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-26T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">27</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">.Net documentation: load additional assembly information

specifications for AssemblyInfo string formats:
https://docs.microsoft.com/en-us/dotnet/api/system.type.assemblyqualifiedname?redirectedfrom=MSDN&amp;view=netframework-4.7.2#System_Type_AssemblyQualifiedName</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-26T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">26</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">refactor: rename ClassGenericParameter and MethodGenericParameter to ParameterClassGeneric and ParameterMethodGeneric
so that sorting by filename groups like-object together</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">25</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">refactor: make constructors and operators subclasses of DotNetMethod</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">23</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">what to do if assembly actually includes types named "T", "U2" or "A"?
- subtype parameter so it can store just the class-generic-index or method-generic-index
- only generate string like &lt;T&gt; when converting to string
- put in step after all xml is parsed that checks for all used types - if type conflicts with generic-types, append an X on the generic-type or something - handle if search already passed type "AX"</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">22</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">convert the special case constructors in DotNetQualifiedName into different subclasses for DotNetQualifiedMethodName and DotNetQualifiedTypeName.</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">17</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">load .Net XML from file</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-20T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-25T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">11</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">update to use most recent version of Libraries.AssemblyInfo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-19T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-19T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">9</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">list EPPlus version under Version release notes</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-17T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">4</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">standard ReadMe</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-14T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">3</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">documentation with EarlyDocs</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-14T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">10</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">test cases for ExcelPackage</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-17T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-18T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">2</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">include GetVersion method or field</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-14T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-16T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">8</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">add xml stuff to C# notes</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-14T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-16T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">1</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">pull over functions from Tamarin</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-14T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-16T00:00:00.000</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="Number">7</Data>
        </Cell>
        <Cell ss:StyleID="paragraph">
          <Data ss:Type="String">rename repository to WithoutHaste.DataFiles</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-14T00:00:00.000</Data>
        </Cell>
        <Cell ss:StyleID="cellShortDate">
          <Data ss:Type="DateTime">2018-09-15T00:00:00.000</Data>
        </Cell>
      </Row>
    </Table>
    <x:WorksheetOptions />
  </ss:Worksheet>
  <ss:Worksheet ss:Name="Config">
    <Table>
      <Row>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Status</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Active</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Category</Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell ss:StyleID="header">
          <Data ss:Type="String">Max Id</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="String">Todo</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Active</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Major</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="Number">107</Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="String">Maybe</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Active</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Feature - Minor</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="String">Done</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Inactive</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Major</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="String">Skip</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Inactive</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Bug - Minor</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Inactive</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Test</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Inactive</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Task</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
      </Row>
      <Row>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Inactive</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">Documentation</Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
        <Cell>
          <Data ss:Type="String">
          </Data>
        </Cell>
      </Row>
    </Table>
    <x:WorksheetOptions />
  </ss:Worksheet>
</Workbook>
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WithoutHaste.DataFiles.Excel</name>
    </assembly>
    <members>
        <member name="T:WithoutHaste.DataFiles.Excel.ExcelPackageHelper">
            <summary>Extensions for EPPlus OfficeOpenXml.ExcelPackage.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.MIN_ROW_INDEX">
            <summary>Minimum row index in excel.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.MIN_COLUMN_INDEX">
            <summary>Minimum column index in excel.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.MIN_COLUMN_CHAR">
            <summary>Minimum column character in excel.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AddWorksheet(OfficeOpenXml.ExcelPackage,System.String)">
            <summary>
            Add a new Worksheet to an ExcelPackage.
            </summary>
            <param name="excelPackage"></param>
            <param name="name">The name of the Worksheet.</param>
            <returns>The new Worksheet.</returns>
            <exception cref="T:System.ArgumentException"><paramref name='excelPackage'/> cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetWorksheet(OfficeOpenXml.ExcelPackage,System.String)">
            <summary>
            Searches the ExcelPackage for a Worksheet by name.
            </summary>
            <param name="excelPackage"></param>
            <param name="name">The name of the Worksheet.</param>
            <returns>The Worksheet, or null.</returns>
            <exception cref="T:System.ArgumentException"><paramref name='excelPackage'/> cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.String})">
            <duplicate cref="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Object})" />
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Int32})">
            <duplicate cref="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Object})" />
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Decimal})">
            <duplicate cref="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Object})" />
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Object})">
            <summary>
            Add a new row of data to the end of the Worksheet.
            </summary>
            <param name="worksheet"></param>
            <param name="values">The data values for the row.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Values list cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetRow(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Returns all the values from one row, specified by the 0-indexed row number.
            </summary>
            <param name="worksheet"></param>
            <param name="row">Row number, starting at 1.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Row index out of range.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.SetColumnByIndex(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Set an entire column of values at once.
            </summary>
            <param name="worksheet"></param>
            <param name="column">Integer index of column, starting at 1.</param>
            <param name="values">Data values for the column.</param>
            <param name="skipFirstRow">If true, values[0] is applied to row 2 instead of 1. Intended for indicating the first row is for headers.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Values list cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.SetColumnByHeader(OfficeOpenXml.ExcelWorksheet,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Set an entire column of values at once.
            </summary>
            <param name="worksheet"></param>
            <param name="header">Header value of column.</param>
            <param name="values">Data values for the column. Should not include the header.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Values list cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.SetColumnByChar(OfficeOpenXml.ExcelWorksheet,System.String,System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Set an entire column of values at once.
            </summary>
            <param name="worksheet"></param>
            <param name="column">Character name of column. Example: "A", "Z", "AA".</param>
            <param name="values">Data values for the column.</param>
            <param name="skipFirstRow">If true, values[0] is applied to row 2 instead of 1. Intended for indicating the first row is for headers.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Values list cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetColumnCharForHeader(OfficeOpenXml.ExcelWorksheet,System.String)">
            <summary>
            Searches first row for a particular value.
            </summary>
            <param name="worksheet"></param>
            <param name="header">Header value.</param>
            <returns>Character name of the header's column, or null. Example: "A", "Z", "AA".</returns>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">No header row found.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetColumnByHeader(OfficeOpenXml.ExcelWorksheet,System.String)">
            <summary>
            Returns all the values from one column, specified by the header value.
            </summary>
            <param name="worksheet"></param>
            <param name="header"></param>
            <returns>List of data values, not including the header. Includes all cells to the bottom of the Worksheet.</returns>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetColumnByIndex(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Boolean)">
            <summary>
            Returns all values from one column, specified by the integer index of the column.
            </summary>
            <param name="worksheet"></param>
            <param name="column">Integer index of column, starting at 1.</param>
            <param name="skipFirstRow">If true, the first value in the column is not included. Intended for skipping the header value.</param>
            <returns>List of data values. Includes all cells to the bottom of the Worksheet.</returns>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetColumnByChar(OfficeOpenXml.ExcelWorksheet,System.String,System.Boolean)">
            <summary>
            Returns all values from one column, specified by the character name of the column.
            </summary>
            <param name="worksheet"></param>
            <param name="column">Character name of column. Example: "A", "Z", "AA".</param>
            <param name="skipFirstRow">If true, the first value in the column is not included. Intended for skipping the header value.</param>
            <returns>List of data values. Includes all cells to the bottom of the Worksheet.</returns>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.CountRows(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Returns the number of rows in the Worksheet.
            </summary>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.CountColumns(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Returns the number of columns in the Worksheet.
            </summary>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.CountWorksheets(OfficeOpenXml.ExcelPackage)">
            <summary>
            Returns the number of Worksheets in the ExcelPacakge.
            </summary>
            <exception cref="T:System.ArgumentException">ExcelPackage cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.ColumnChar(System.Int32)">
            <summary>
            Convert column integer index to character index.
            </summary>
            <example>1 becomes A</example>
            <example>26 becomes Z</example>
            <example>27 becomes AA</example>
            <param name="columnNumber">1-based index of column</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.Clear(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Remove all rows and columns from Worksheet.
            </summary>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="T:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile">
            <summary>
            Building a Microsoft Excel 2003 Xml file with XmlDocument.
            </summary>
            <example>
            Format:
            <code><![CDATA[
            <? xml version="1.0" encoding="UTF-8"?>
            <? mso-application progid="Excel.Sheet" ?>
            <Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" 
              xmlns:c="urn:schemas-microsoft-com:office:component:spreadsheet" 
              xmlns:html="http://www.w3.org/TR/REC-html40" 
              xmlns:o="urn:schemas-microsoft-com:office:office" 
              xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" 
              xmlns:x="urn:schemas-microsoft-com:office:excel" 
              xmlns:x2="http://schemas.microsoft.com/office/excel/2003/xml" 
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 
              <ss:Worksheet ss:Name="Sheet1">
                <Table>
                  <Column />
                  <Row>
                    <Cell>
                      <Data>
                        Cell Value
                      </Data>
                    </Cell>
                  </Row>
                </Table>
              </ss:Worksheet>
            </ss:Workbook>
            ]]></code>
            </example>
        </member>
        <member name="P:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.XmlDocument">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.WorkbookNode">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.StylesNode">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.Tables">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.#ctor">
            <summary>
            Sets up a default file containing no Worksheets.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.#ctor(System.String)">
            <summary>
            Load from file.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetTableIndex(System.String)">
            <summary>
            Returns the index of the Table in the Worksheet with the specified title.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddStyle(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a Style. If a Style with the same id already exists, it is overwritten.
            </summary>
            <example>
            <![CDATA[
            <Styles>
              <Style ss:ID="id">
                <childName ss:childNameAttribute="childAttributeValue" />
              </Style>
            </Styles>
            ]]>
            </example>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.RemoveStyle(System.String)">
            <summary>
            Removes a Style.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddWorksheet(System.String)">
            <summary>
            Add a Worksheet to the end of the list of Worksheets, containing an empty Table.
            </summary>
            <param name="title">Worksheet title.</param>
            <returns>The index of the worksheet/table.</returns>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.SetColumnWidths(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set column widths on the specified Table. Overwrites column widths if they were already set.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddHeaderRow(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Adds a Row of header-style Cells to the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddRow(System.Int32,System.Collections.Generic.List{System.Object})">
            <summary>
            Creates Cells of the appropriate type for each value, and adds all Cells to a new Row in the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddRow(System.Int32,System.Collections.Generic.List{System.Xml.XmlNode})">
            <summary>
            Adds all Cells to a new Row in the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddColumns(System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}})">
            <summary>
            Creates Cells for each data values, adds sufficient Rows to the the specified Table to contain all the columns. Add all Cells to the Rows.
            </summary>
            <param name="tableIndex">0-based table index within Workbook.</param>
            <param name="columns">List of columns, each column being a list of values.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddColumns(System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{System.Xml.XmlNode}})">
            <summary>
            Adds sufficient Rows to the the specified Table to contain all the columns. Add all Cells to the Rows.
            </summary>
            <param name="tableIndex">0-based table index within Workbook.</param>
            <param name="columns">List of columns, each column being a list of "Cell" tags.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetRowValues(System.Int32,System.Int32)">
            <summary>
            Returns a list of values from the Cells in the specified Row.
            </summary>
            <param name="tableIndex">Zero-based index of Table in Workbook.</param>
            <param name="rowIndex">Zero-based index of Row in Table.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetRowCount(System.Int32)">
            <summary>
            Returns the number of Rows in the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetColumnCount(System.Int32)">
            <summary>
            Returns the number of Columns in the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetHeaderIndex(System.Int32,System.String)">
            <summary>
            Returns zero-based index of the column with the selected header.
            Returns -1 if header is not found.
            </summary>
            <remarks>Only the first row in the table is searched for the header.</remarks>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetHeaders(System.Int32)">
            <summary>
            Returns all the header values from the first row.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetColumnValues(System.Int32,System.String)">
            <summary>
            Returns a list of values from the Cells in the column with the specified header.
            </summary>
            <remarks>The first row is skipped as the header row.</remarks>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetColumnValues(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a list of values from the cells in the selected column.
            </summary>
            <param name="tableIndex">0-based table index within Workbook.</param>
            <param name="columnIndex">0-based column index within Table.</param>
            <param name="firstRowIsHeader">If true, the first row of the table is skipped.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.Save(System.String)">
            <summary>Save file.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateWidthAttribute(System.Int32)">
            <summary>Returns an ss:Width attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateStyleIdAttribute(System.String)">
            <summary>Returns an ss:StyleID attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateNameAttribute(System.String)">
            <summary>Returns an ss:Name attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateStringTypeAttribute">
            <summary>Returns an ss:Type="String" attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateNumberTypeAttribute">
            <summary>Returns an ss:Type="Number" attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateDateTypeAttribute">
            <summary>Returns an ss:Type="DateTime" attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateTypeAttribute(System.String)">
            <summary>Returns a custom ss:Type attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateAttribute(System.String,System.String,System.String)">
            <summary>Returns a custom attribute.</summary>
            <remarks>Only namespace URIs known to this format can be referenced.</remarks>
            <exception cref="T:System.ArgumentException">Unknown namespace URI prefix.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateAttribute(System.String,System.String,System.String,System.String)">
            <summary>Returns a custom attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateCell(System.Object)">
            <summary>
            Creates a Cell tag of the appropriate type containing the specified data.
            Supports DateTime cells, Number cells, and Text cells. All unknown types are converted to strings.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateDateCell(System.DateTime)">
            <summary>Creates a Cell tag containing the specified date.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateNumberCell(System.Int32)">
            <summary>Generate a Cell tag containing the specified number.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateHeaderCell(System.String)">
            <summary>Generate a header Cell tag containing the specified text.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateParagraphCell(System.String)">
            <summary>Generate a paragraph Cell tag containing the specified text.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateTextCell(System.String)">
            <summary>Generate a paragraph Cell tag containing the specified text.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateEmptyCell">
            <summary>Generate an empty Cell tag.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateTextCell(System.String,System.String)">
            <summary>Generate a Cell tag containing the specified text.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.DateToString(System.DateTime)">
            <summary>Converts a date to the expected string format.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.Utilities.Validate(System.Xml.XmlNode,System.String)">
            <summary>
            Throw exception if XmlNode does not exist, or does not have the expected LocalName.
            </summary>
            <exception cref="T:WithoutHaste.DataFiles.Excel.XmlNodeException"></exception>
        </member>
        <member name="T:WithoutHaste.DataFiles.Excel.XmlNodeException">
            <summary>
            Exceptions related to XmlNode objects.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.XmlNodeException.#ctor(System.String)">
            <summary></summary>
        </member>
    </members>
</doc>

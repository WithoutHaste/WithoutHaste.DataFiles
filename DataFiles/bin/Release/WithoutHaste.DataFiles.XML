<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WithoutHaste.DataFiles</name>
    </assembly>
    <members>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetBaseType">
            <summary>
            Represents a node in an inheriance hierarchy.
            Stub class: contains minimal information about the type.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetBaseType.Name">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetBaseType.BaseType">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetBaseType.Depth">
            <summary>Returns the inheritance distance from here to the bottom.</summary>
            <example>Class "System.Reflection.TypeInfo" has Depth = 4 because its inheritance path is "TypeInfo" -> "Type" -> "MemberInfo" -> "Object".</example>
            <example>Class "System.Object" has Depth = 1 because its inheritance path is just "Object".</example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetBaseType.#ctor(System.Type)">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetReferenceClassGeneric">
            <summary>
            Represents a generic-type parameter that is in reference to a class's declared generic types.
            </summary>
            <example>
            The "T" and "U" in the constructor parameters.
            <![CDATA[
            class MyGeneric<T,U>
            {
                public MyGeneric(T t, U u) { }
            }
            ]]>
            </example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetReferenceClassGeneric.LocalName">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetReferenceClassGeneric.#ctor(System.Int32,System.String)">
            <param name="genericTypeIndex">
              0-based index of type in class declaration type parameter list.
              <example><![CDATA[Index 0 refers to "T" in "class MyGeneric<T,U> { }"]]></example>
            </param>
            <param name="alias">Alias of generic-type within assembly. Null if not known.</param>
            <exception cref="T:System.ArgumentException">GenericTypeIndex cannot be less than 0.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetReferenceClassGeneric.FromVisualStudioXml(System.String)">
            <summary>
            Parses a .Net XML documentation class-generic-type parameter.
            </summary>
            <example><![CDATA[Namespace.MyType<T>{ } is formatted as Namespace.MyType`1]]></example>
            <exception cref="T:WithoutHaste.DataFiles.XmlFormatException"><paramref name="name"/> is not in expected format: `Index.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetReferenceClassGeneric.HasExpectedVisualStudioXmlFormat(System.String)">
            <summary>
            Check if a string is properly formatted as a parameter referencing a class-generic-type.
            </summary>
            <example>`0</example>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetReferenceGeneric">
            <summary>
            Represents a generic-type parameter that is not in a class declaration or a method declaration.
            </summary>
            <example><![CDATA[The "U"s in MyMethod(List<U> list, U obj).]]></example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetReferenceGeneric.Alias">
            <summary>
            The generic-type alias specified in the assembly. Null if not known.
            Whether this refers to a class-generic or method-generic is determined by the subclass.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetReferenceGeneric.genericTypeIndex">
            <summary>0-based index in class's generic type list corresponding to this parameter.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetReferenceGeneric.#ctor(System.Int32,System.String)">
            <param name="genericTypeIndex">
              0-based index of type in class or method declaration type parameter list.
              <example><![CDATA[Index 0 refers to "T" in "class MyGeneric<T,U> { }"]]></example>
              <example><![CDATA[Index 0 refers to "A" in "void MyMethod<A,B>() { }"]]></example>
            </param>
            <param name="alias">Alias of generic-type within assembly. Null if not known.</param>
            <exception cref="T:System.ArgumentException">GenericTypeIndex cannot be less than 0.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetReferenceGeneric.SetAlias(System.String)">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentCode">
            <summary>
            Represents an inline section of code in the comments.
            </summary>
            <example><![CDATA[<c>code fragment</c>]]></example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentCode.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentCode.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation c.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentCodeBlock">
            <summary>
            Represents a section of code in the comments.
            </summary>
            <example><![CDATA[<code>code statements</code>]]></example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentCodeBlock.Language">
            <summary>Specify the language of the code block. Null if not known.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentCodeBlock.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentCodeBlock.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation code.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentLinkedGroup`1">
            <summary>
            Represents an ordered collection of comments that is linked to something in the assembly which it is documenting.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentLinkedGroup`1.Link">
            <summary>Reference link from comments to something in the assembly.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentLinkedGroup`1.#ctor">
            <summary>Empty constructor</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentLinkedGroup`1.#ctor(`0,WithoutHaste.DataFiles.DotNet.DotNetComment)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentLinkedGroup`1.#ctor(`0,WithoutHaste.DataFiles.DotNet.DotNetComment[])">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentLinkedGroup`1.#ctor(`0,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetComment})">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentListItem">
            <summary>
            Represents a listheader or item in a .Net XML documentation list.
            </summary>
            <example>
            Format options:
            <![CDATA[
              <listheader>
                plain text
              </listheader>
              <listheader>
                <term>Term</term>
              </listheader>
              <listheader>
                <description>Description</description>
              </listheader>
              <listheader>
                <term>Term</term>
                <description>Description</description>
              </listheader>
            ]]>
            </example>
            <example>
            Format options:
            <![CDATA[
              <item>
                plain text
              </item>
              <item>
                <term>Term</term>
              </item>
              <item>
                <description>Description</description>
              </item>
              <item>
                <term>Term</term>
                <description>Description</description>
              </item>
            ]]>
            </example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentListItem.IsHeader">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentListItem.Term">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentListItem.Description">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentListItem.#ctor(System.String,System.String,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentListItem.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation listheader or item.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentParameter">
            <summary>
            Represents a parameter description in the comments.
            </summary>
            <example><![CDATA[<param name="myParam">nested comments</param>]]></example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentParameter.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentParameterLink,WithoutHaste.DataFiles.DotNet.DotNetComment)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentParameter.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentParameterLink,WithoutHaste.DataFiles.DotNet.DotNetComment[])">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentParameter.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentParameterLink,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetComment})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentParameter.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation for param.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentParameterLink">
            <summary>
            Represents a link in the comments to an internal parameter name.
            </summary>
            <example><![CDATA[<paramref name="paramName" />]]></example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentParameterLink.Name">
            <summary>Name of the parameter in local method.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentParameterLink.FullName">
            <inheritdoc />
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentParameterLink.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentParameterLink.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation for paramref.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLinkedGroup">
            <summary>
            Represents a section of comments that is linked to a fully qualified type or member.
            </summary>
            <example><![CDATA[<permission cref="Namespace.Type.Member">nested comments</permission>]]></example>
            <example><![CDATA[<exception cref="Namespace.ExceptionType">nested comments</exception>]]></example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLinkedGroup.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLink,WithoutHaste.DataFiles.DotNet.DotNetComment)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLinkedGroup.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLink,WithoutHaste.DataFiles.DotNet.DotNetComment[])">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLinkedGroup.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLink,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetComment})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLinkedGroup.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation for permission or exception.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentRow">
            <summary>
            Represents a row of data in a .Net XML documentation table.
            </summary>
            <example><![CDATA[<listheader><term>Header 1</term><term>Header 2</term></listheader>]]></example>
            <example><![CDATA[<item><term>Cell 1</term><term>Cell 2</term></item>]]></example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentRow.IsHeader">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentRow.ColumnCount">
            <summary>Number of columns (cells) in the row.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetCommentRow.Cells">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentRow.Item(System.Int32)">
            <summary>
            Returns the selected cell of the row. Returns an empty cell if no cell is found.
            </summary>
            <remarks>Returns an empty cell because Row does not know the number of columns in the Table, just how many cells are filled on this row.</remarks>
            <param name="columnIndex">0-based index of table column.</param>
            <exception cref="T:System.IndexOutOfRangeException">Column index is negative.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentRow.#ctor(System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetCommentCell},System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentRow.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation "listheader" or "item", expecting one "term" per cell.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameter">
            <summary>
            Represents a generic-type parameter description in the comments.
            </summary>
            <example><![CDATA[<typeparam name="T">nested comments</typeparam>]]></example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameter.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameterLink,WithoutHaste.DataFiles.DotNet.DotNetComment)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameter.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameterLink,WithoutHaste.DataFiles.DotNet.DotNetComment[])">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameter.#ctor(WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameterLink,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetComment})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameter.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation for typeparam.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameterLink">
            <summary>
            Represents a link in the comments to an internal generic-type parameter.
            </summary>
            <example><![CDATA[<typeparamref name="T" />]]></example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameterLink.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentTypeParameterLink.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation for typeparamref.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetMethodConstructor">
            <summary>
            Represents a method that is a constructor.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethodConstructor.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetParameter})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethodConstructor.AddAssemblyInfo(System.Reflection.ConstructorInfo)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetMethodOperator">
            <summary>
            Represents a method that is an operator.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethodOperator.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetParameter})">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName">
            <summary>
            Represents a fully qualified type name, for return types / field types / property types / parameter types.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.LocalName">
            <summary>Local data type name with generic type parameters (if applicable).</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.GenericTypeParameters">
            <summary>If this is a generic type, these are the specified parameter types.</summary>
            <example><![CDATA[In parameter type List<System.String>, System.String is the generic-type parameter of List.]]></example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.#ctor">
            <summary>Empty constructor</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.#ctor(System.String,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName})">
            See <see cref="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.#ctor(System.String,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName},WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)" />
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.#ctor(System.String,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName},WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <param name="localName"></param>
            <param name="genericTypeParameters">List of generic-type parameters within this type.</param>
            <param name="fullNamespace"></param>
            <exception cref="T:System.ArgumentException"><paramref name="genericTypeParameters"/> cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.FromVisualStudioXml(System.String)">
            <summary>
            Parses a .Net XML documentation type name.
            Not intended for type declarations. Intended for field types, property types, parameter types, and return types.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.FromAssemblyInfo(System.Type)">
            <summary>
            Parses a System.Reflection.AssemblyInfo full name.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.FromAssemblyInfo(System.Type,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName})">
            <summary>
            Parses a System.Reflection.AssemblyInfo full name.
            </summary>
            <list>
              <item>The escape character is '\'</item>
              <item>Nested types are separated with '+' instead of '.'</item>
              <item>Class declaration of generic types are shown the same as .Net XML documentation: MyType`1 for one generic type</item>
              <item>When a generic type is defined: System.Collections.Generic.List`1[U], where U is the type alias from the class declaration</item>
            </list>
            <param name="type"></param>
            <param name="bubbleUpParameters">Optional. When reflection gives type information about a generic type nested inside a generic type, all the generic-type-arguments are listed in the inner-most type. This is for passing that information back up the chain of types.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName.GetFullListOfLocalNames">
            <summary>
            Collect full list of local names used throughout documentation.
            Includes namespaces, internal types, external types, and members.
            Does not include generic paremeters.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName">
            <summary>
            Represents a fully qualified method name.
            </summary>
            <remarks>
            Cannot handle methods that declare more than 12 generic types,
            such as <![CDATA[MyMethod<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>]]>.
            </remarks>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.GenericTypeNames">
            <summary>Default names that will be given to generic-method-types, in order.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.LocalName">
            <summary>Local method name with generic type parameters (if applicable).</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.genericTypeCount">
            <summary>The number of generic-types required by the method declaration.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.genericTypeAliases">
            <summary>Specific generic type aliases for this method. If null, the shared <see cref="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.GenericTypeNames"/> will be used.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.#ctor">
            <summary>Empty constructor</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.#ctor(System.String,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.#ctor(System.String,WithoutHaste.DataFiles.DotNet.DotNetQualifiedName,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedMethodName.AddAssemblyInfo(System.Reflection.MethodInfo)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName">
            <summary>
            Represents a fully qualified class name, for class declarations.
            </summary>
            <remarks>
            Cannot handle classes that declare more than 12 generic types,
            such as <![CDATA[MyType<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>]]>.
            </remarks>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.GenericTypeNames">
            <summary>Default names that will be given to generic-types, in order.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.LocalName">
            <summary>Local data type name with generic type parameters (if applicable).</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.genericTypeCount">
            <summary>The number of generic-types required by the class declaration.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.genericTypeAliases">
            <summary>Specific generic type aliases for this type. If null, the shared <see cref="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.GenericTypeNames"/> will be used.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.#ctor">
            <summary>Empty constructor</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.#ctor(System.String,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.#ctor(System.String,WithoutHaste.DataFiles.DotNet.DotNetQualifiedName,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedClassName.AddAssemblyInfo(System.Reflection.TypeInfo)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetReferenceMethodGeneric">
            <summary>
            Represents a generic-type parameter that is in reference to a method's declared generic types.
            </summary>
            <example>
            The "A" and "B" in the MyMethod parameters.
            <![CDATA[
            class MyGeneric<T,U>
            {
                public MyGeneric(T t, U u) { }
                
                public void MyMethod<A,B>(A a, B b, T t, U u) { }
            }
            ]]>
            </example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetReferenceMethodGeneric.LocalName">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetReferenceMethodGeneric.#ctor(System.Int32,System.String)">
            <param name="genericTypeIndex">
              0-based index of type in method declaration type parameter list.
              <example><![CDATA[Index 0 refers to "A" in "void MyMethod<A,B>() { }"]]></example>
            </param>
            <param name="alias">Alias of generic-type within assembly. Null if not known.</param>
            <exception cref="T:System.ArgumentException">GenericTypeIndex cannot be less than 0.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetReferenceMethodGeneric.FromVisualStudioXml(System.String)">
            <summary>
            Parses a .Net XML documentation method-generic-type parameter.
            </summary>
            <example><![CDATA[Namespace.MyType.MyMethod<A>(A) is formatted as Namespace.MyType.MyMethod``1(``0)]]></example>
            <exception cref="T:WithoutHaste.DataFiles.XmlFormatException"><paramref name="name"/> is not in expected format: ``Index.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetReferenceMethodGeneric.HasExpectedVisualStudioXmlFormat(System.String)">
            <summary>
            Check if a string is properly formatted as a parameter referencing a method-generic-type.
            </summary>
            <example>``0</example>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.IDotNetCommentLink">
            <summary>
            Represents anything in the comments that links to something in the assembly.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.IDotNetCommentLink.FullName">
            <summary>Return the fully qualified name of the referenced assembly element.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetComment">
            <summary>
            Represents a section of documentation, such as the contents of a <![CDATA[<summary></summary>]]> tag.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetComment.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses top-level .Net XML documentation comments.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetComment.FromVisualStudioXml(System.String)">
            <summary>Creates a plain text comment.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetComment.ParseSection(System.Xml.Linq.XElement)">
            <summary>Parses inner .Net XML documentation comments.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetComment.ValidateXmlTag(System.Xml.Linq.XElement,System.String)">
            <summary>
            Throws exception on unexpected xml formats.
            </summary>
            <exception cref="T:WithoutHaste.DataFiles.XmlFormatException">XML tag does not have the expected local name, or is null</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetComment.ValidateXmlTag(System.Xml.Linq.XElement,System.String[])">
            <summary>
            Throws exception on unexpected xml formats.
            </summary>
            <exception cref="T:WithoutHaste.DataFiles.XmlFormatException">XML tag does not have any of the expected local names, or is null</exception>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentCell">
            <summary>
            Represents a cell in a table in .Net XML documentation.
            </summary>
            <remarks>
            Does not inherit from DotNetCommentText because a cell cannot appear everywhere text can.
            </remarks>
            <example><![CDATA[<term>plain text</term>]]></example>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetCommentCell.EmptyCell">
            <summary>Default empty cell.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentCell.Text">
            <summary>Cell contents.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentCell.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentCell.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation term.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup">
            <summary>
            Represents an ordered collection of comments.
            </summary>
            <remarks>Groups may include a link to something in the assembly which these comments are documenting.</remarks>
            <example><![CDATA[<summary>nested comments and/or plain text</summary>]]></example>
            <example><![CDATA[<remarks>nested comments and/or plain text</remarks>]]></example>
            <example><![CDATA[<example>nested comments and/or plain text</example>]]></example>
            <example><![CDATA[<para>nested comments and/or plain text</para>]]></example>
            <example><![CDATA[<returns>nested comments and/or plain text</returns>]]></example>
            <example><![CDATA[<value>nested comments and/or plain text</value>]]></example>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.Comments">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.IsEmpty">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.Count">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.#ctor">
            <summary>Empty constructor</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.#ctor(WithoutHaste.DataFiles.DotNet.DotNetComment)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.#ctor(WithoutHaste.DataFiles.DotNet.DotNetComment[])">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.#ctor(System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetComment})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.Add(WithoutHaste.DataFiles.DotNet.DotNetComment)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.Add(WithoutHaste.DataFiles.DotNet.DotNetComment[])">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentGroup.Add(System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetComment})">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLink">
            <summary>
            Represents a link in the comments to an internal or extenal type or type.method().
            </summary>
            <example><![CDATA[<exception cref="Namespace.ExceptionType">nested comments and/or plain text</exception>]]></example>
            <example><![CDATA[<permission cref="Namespace.Type">nested comments and/or plain text</permission>]]></example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLink.Name">
            <summary>Name of type or member.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLink.FullName">
            <inheritdoc />
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLink.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentQualifiedLink.FromVisualStudioXml(System.String)">
            <summary>Parses .Net XML documentation cref.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentList">
            <summary>
            Represents a list in the comments.
            </summary>
            <example>
            <![CDATA[
             <list type="bullet"> <!-- type can also be "number" -->
              <listheader>
               <term>Term</term>
               <description>Description</description>
              </listheader>
              <item>
               <term>Term</term>
               <description>Description</description>
              </item>
             </list>
            ]]>
            </example>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentList.IsNumbered">
            <summary>
            True for numbered lists (numbering starts at 1).
            False for bulleted lists.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetCommentList.Items">
            <summary>Items in the list.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentList.Length">
            <summary>Number of items in the list. Includes headers.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentList.#ctor(System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetCommentListItem},System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentList.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation list (which may actually be a table).</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentMethodLink">
            <summary>
            Represents a link in the comments to an internal or extenal method.
            </summary>
            <example><![CDATA[<permission cref="Namespace.Type.Method(Type1, Type2)">nested comments and/or plain text</permission>]]></example>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetCommentMethodLink.Parameters">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentMethodLink.FullSignature">
            <summary>Fully qualified method name with parameters.</summary>
            <example>Namespace.Type.Method()</example>
            <example>Namespace.Type.Method(int,string)</example>
            <example><![CDATA[Namespace.Type.Method(System.Collections.Generic.List<int>)]]></example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentMethodLink.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetParameter})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentMethodLink.FromVisualStudioXml(System.String)">
            <summary>Parses .Net XML documentation cref for methods.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentTable">
            <summary>
            Represents a table in the comments.
            </summary>
            <example>
            <![CDATA[
             <list type="table">
              <listheader>
               <term>Column 1</term>
               <term>Column 2</term>
               <term>Column 3</term>
              </listheader>
              <item>
               <term>Row 1, Cell 1</term>
               <term>Row 1, Cell 2</term>
               <term>Row 1, Cell 3</term>
              </item>
             </list>
            ]]>
            </example>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetCommentTable.Rows">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentTable.RowCount">
            <summary>Number of rows in the table. Includes header rows and normal rows.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentTable.HeaderRowCount">
            <summary>Number of header rows in the table.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentTable.DataRowCount">
            <summary>Number of data (non-header) rows in the table.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentTable.ColumnCount">
            <summary>Maximum number of columns in the table.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentTable.Item(System.Int32,System.Int32)">
            <summary>
            Returns the selected <see cref="T:WithoutHaste.DataFiles.DotNet.DotNetCommentCell"/> of the table. Will return an empty <see cref="T:WithoutHaste.DataFiles.DotNet.DotNetCommentCell"/> if the cell within range but does not actually exist.
            </summary>
            <param name="rowIndex">0-based index of table row.</param>
            <param name="columnIndex">0-based index of table column.</param>
            <exception cref="T:System.IndexOutOfRangeException">Either the row or column index is out of range.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentTable.#ctor(System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetCommentRow})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentTable.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>Parses .Net XML documentation table.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetEvent">
            <summary>
            Represents a type's event.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetEvent.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetEvent.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>
            Parse .Net XML documentation for Event data.
            </summary>
            <param name="memberElement">Expects tag name "member".</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetEvent.AddAssemblyInfo(System.Reflection.EventInfo)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.FieldCategory">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.FieldCategory.Unknown">
            <summary>Not enough information is available to determine field category.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.FieldCategory.Normal">
            <summary>No special category.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.FieldCategory.Constant">
            <summary>Constant or Readonly field.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetField">
            <summary>
            Represents a type's field.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetField.Category">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetField.TypeName">
            <summary>Fully qualified name of data type, if known. Null if not known.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetField.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetField.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>
            Parse .Net XML documentation for Field data.
            </summary>
            <param name="memberElement">Expects tag name "member".</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetField.AddAssemblyInfo(System.Reflection.FieldInfo)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetMember">
            <summary>
            Represents anything that a class/struct/interface may contain.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetMember.Name">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetMember.HasComments">
            <summary>True when there's at least one comment on this member.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetMember.HasNoComments">
            <summary>True when there are no comments on this member.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.SummaryComments">
            <summary>Comments from "summary" xml tags. Only expected as a top-level tag.</summary>
            <remarks>If there are multiple "summary" tags, their contents will be concatenated as if they were one tag.</remarks>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.RemarksComments">
            <summary>Comments from "remarks" xml tags. Only expected as a top-level tag.</summary>
            <remarks>If there are multiple "remarks" tags, their contents will be concatenated as if they were one tag.</remarks>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.PermissionComments">
            <summary>Comments from "permission" xml tags. Only expected as top-level tags.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.ExampleComments">
            <summary>Comments from "example" xml tags.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.ExceptionComments">
            <summary>Comments from "exception" xml tags.  Only expected as top-level tags.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.ParameterComments">
            <summary>Comments from "param" and "typeparam" xml tags. Only expected as top-level tags.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.ValueComments">
            <summary>Comments from "value" xml tags. Only expected as a top-level tag.</summary>
            <remarks>If there are multiple "value" tags, their contents will be concatenated as if they were one tag.</remarks>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.ReturnsComments">
            <summary>Comments from "returns" xml tags. Only expected as a top-level tag.</summary>
            <remarks>If there are multiple "returns" tags, their contents will be concatenated as if they were one tag.</remarks>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMember.FloatingComments">
            <summary>Any comments not within expected top-level tags.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMember.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMember.ParseVisualStudioXmlDocumentation(System.Xml.Linq.XElement)">
            <summary>
            Parse .Net XML documentation about this member.
            </summary>
            <param name="parent">Expects the tag containing all documentation for this member.</param>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.MethodCategory">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.MethodCategory.Unknown">
            <summary>Not enough information is available to determine method category.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.MethodCategory.Normal">
            <summary>No special category.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.MethodCategory.Static">
            <summary>Static method.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetMethod">
            <summary>
            Represents a method.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetMethod.Category">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetMethod.ReturnTypeName">
            <summary>Fully qualified name of return data type, if known. Null if not known.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetMethod.Parameters">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethod.#ctor">
            <summary>Empty constructor</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethod.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName,System.Collections.Generic.List{WithoutHaste.DataFiles.DotNet.DotNetParameter})">
            <summary>Normal constructor</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethod.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>
            Parse .Net XML documentation for method signature data.
            </summary>
            <param name="memberElement">Expects tag "member".</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethod.ParametersFromVisualStudioXml(System.String)">
            <summary>
            Parse .Net XML documentation parameter lists.
            </summary>
            <param name="text">
            Expects: null
            Expects: empty string
            Expects: "(type, type, type)"
            </param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethod.MatchesSignature(System.Reflection.MethodInfo)">
            <summary>
            Returns true if this method's signature matches the reflected MethodInfo.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethod.MatchesArguments(System.Reflection.ParameterInfo[])">
            <summary>
            Returns true if this method's parameter list matches the reflected ParameterInfo.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetMethod.AddAssemblyInfo(System.Reflection.MethodInfo)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetParameter">
            <summary>
            Represents a normal-type parameter in a method signature.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetParameter.TypeName">
            <summary>Fully qualified data type name object.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetParameter.FullTypeName">
            <summary>Fully qualified data type name.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetParameter.LocalTypeName">
            <summary>Local data type name.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetParameter.Name">
            <summary>Name of parametere. Null if not known.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetParameter.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetParameter.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedTypeName)">
            <summary></summary>
            <param name="typeName">Fully qualified data type name.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetParameter.FromVisualStudioXml(System.String)">
            <summary>
            Parses a .Net XML documentation parameter type name.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetParameter.AddAssemblyInfo(System.Reflection.ParameterInfo)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetProperty">
            <summary>
            Represents a type's property.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetProperty.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetProperty.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>
            Parse .Net XML documentation for Property data.
            </summary>
            <param name="memberElement">Expects tag name "member".</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetProperty.AddAssemblyInfo(System.Reflection.PropertyInfo)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetCommentText">
            <summary>
            Represents a plain text segment of comments.
            </summary>
            <remarks>Text is allowed to have a single space at beginning and end. Anymore leading/trailing whitespace will be removed.</remarks>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetCommentText.Text">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetCommentText.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.TypeCategory">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.TypeCategory.Unknown">
            <summary>Not enough information is available to determine type category.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.TypeCategory.Normal">
            <summary>No special category.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.TypeCategory.Abstract">
            <summary>Abstract type.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.TypeCategory.Static">
            <summary>Static type.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.TypeCategory.Interface">
            <summary>Interface.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.TypeCategory.Enum">
            <summary>Enumeration.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.TypeCategory.Exception">
            <summary>Exception.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetType">
            <summary>
            Represents a data type.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.Category">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.BaseType">
            <summary>Base type this type inherits from. Null if not known or none exists.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetType.ImplementedInterfaces">
            <summary>Interfaces this type inherits from, if known</summary>
            <remarks>If an interface extends another interface, reflection reports that the type implements both interfaces.</remarks>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.NestedTypeCount">
            <summary>The number of types nested within this type, including sub-nested types and enums.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetType.NestedTypes">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.NestedEnums">
            <summary>The subset of NestedTypes that are enums.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetType.Methods">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.ConstructorMethods">
            <summary>The subset of Methods that are constructors.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.OperatorMethods">
            <summary>The subset of Methods that are operator overloads.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.StaticMethods">
            <summary>The subset of Methods that are static, but not constructors nor operators.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.NormalMethods">
            <summary>The subset of Methods that are not static, nor constructors, nor operators.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetType.Fields">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.ConstantFields">
            <summary>The subset of Fields that are constants.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.NormalFields">
            <summary>The subset of Fields that are not constant, or where the category is unknown.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetType.Properties">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetType.Events">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetType.AllMembers">
            <summary>
            Lists all methods, fields, properties, and events.
            Does not include nested types.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.#ctor(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.FromVisualStudioXml(System.Xml.Linq.XElement)">
            <summary>
            Parse .Net XML documentation for Type data.
            </summary>
            <param name="memberElement">Expects tag name "member".</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.Is(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary>
            Returns true if this member's name matches the provided name.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.Owns(WithoutHaste.DataFiles.DotNet.DotNetMember)">
            <summary>
            Returns true if this member is defined within this type or any of its nested types.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.Owns(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary>
            Returns true if this qualified name is defined within this type or any of its nested types.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.AddMember(WithoutHaste.DataFiles.DotNet.DotNetMember)">
            <summary>
            Add a member to the correct level within this type.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.AddAssemblyInfo(System.Reflection.TypeInfo,WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.GetFullListOfLocalNames">
            <summary>
            Collect full list of local names used throughout documentation.
            Includes namespaces, internal types, external types, and members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetType.ToString">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName">
            <summary>
            Represents a fully qualified type name or member name.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.FullNamespace">
            <summary>Fully qualified namespace.</summary>
            <remarks>Null if there is no namespace.</remarks>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.FullName">
            <summary>Fully qualified name.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.LocalName">
            <summary>Local data type name.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.localName">
            <summary>Name without namespace or declaring type or generic type parameters.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.#ctor">
            <summary>Empty constructor</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.#ctor(System.String,WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.FromVisualStudioXml(System.String)">
            <summary>
            Parses a .Net XML documentation type, method, or other member name.
            </summary>
            <param name="name">
              <list>
                <item>Names starting with "T:" are parsed as Type names.</item>
                <item>Names starting with "M:" are parsed as Method names.</item>
                <item>Names starting with "F:" are parsed as Member names.</item>
                <item>Names starting with "P:" are parsed as Member names.</item>
                <item>Names starting with "E:" are parsed as Member names.</item>
              </list>
            </param>
            <exception cref="T:WithoutHaste.DataFiles.XmlFormatException">Name does not start with /[TMFPE]:/</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.TypeNameFromVisualStudioXml(System.String)">
            <summary>
            Parses a .Net XML documentation type name or namespace name.
            </summary>
            <remarks>
            Does not differentiate between types and namespaces 
            because a nested type will have other type names in its namespace path
            and there are no important diffences in parsing the two.
            </remarks>
            <example>
              <para>
                How .Net xml documentation formats generic types:
                Backtics are followed by integers, identifying generic types.
              </para>
              <para>
                Single backtics (such as `1) on a class declaration indicate a count of generic types for the class.
                <example><![CDATA[MyGenericType<T,U,V> is documented as MyGenericType`3]]></example>
                Anywhere else within this object's documentation that a single backtic appears, it indicates the index of the generic type in reference to the class declaration.
                <example><![CDATA[MyGenericType(T,U,V) is documented as MyGenericType.#ctor(`0,`1,`2)]]></example>
              </para>
            </example>
            <param name="name">Name may or may not start with "T:"</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.MethodNameFromVisualStudioXml(System.String)">
            <summary>
            Parses a .Net XML documentation method signature.
            </summary>
            <example>
              <para>
                How .Net xml documentation formats generic types:
                Backtics are followed by integers, identifying generic types.
              </para>
              <para>
                Double backtics (such as ``1) on a method name indicate a count of generic types for the method.
                <example><![CDATA[MyMethod<A,B,C> is documented as MyMethod``3]]></example>
                Anywhere else within this method's documentation that a double backtic appears, it indicates the index of the generic type in reference to the method declaration.
                <example><![CDATA[MyMethod<A,B,C>(A,B,C) is documented as MyMethod``3(``0,``1,``2)]]></example>
                A method that uses both its own generic types AND generic types from the class declaration will look like this:
                <example><![CDATA[MyMethod<A,B,C>(A,B,C,T,U) is documented as MyMethod``3(``0,``1,``2,`0,`1)]]></example>
              </para>
            </example>
            <param name="signature">Name may or may not start with "M:". Includes parameter list.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.MemberNameFromVisualStudioXml(System.String)">
            <summary>
            Parses a .Net XML documentation member name.
            </summary>
            <remarks>
            There is no support for generic types here because .Net XMl documentation does not include member types, just the names.
            </remarks>
            <param name="name">Name may or may not start with /[FPE]:/</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.FromAssemblyInfo(System.Reflection.TypeInfo)">
            <summary>
            Parses a System.Reflection.AssemblyInfo full name.
            </summary>
            <list>
              <item>The escape character is '\'</item>
              <item>Nested types are separated with '+' instead of '.'</item>
              <item>Class declaration of generic types are shown the same as .Net XML documentation: MyType`1 for one generic type</item>
              <item>When a generic type is defined: System.Collections.Generic.List`1[U], where U is the type alias from the class declaration</item>
            </list>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.FromAssemblyInfo(System.Type)">
            <summary>See <see cref="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.FromAssemblyInfo(System.Reflection.TypeInfo)"/></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.FromAssemblyInfo(System.String)">
            <summary>See <see cref="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.FromAssemblyInfo(System.Reflection.TypeInfo)"/></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.SetLocalName(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.GetFullListOfLocalNames">
            <summary>
            Collect full list of local names used throughout documentation.
            Includes namespaces, internal types, external types, and members.
            Does not include generic paremeters.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.Combine(System.String[])">
            <summary>Return the names combined with a '.' delimiter.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.Combine(System.Collections.Generic.List{System.String})">
            <summary>Return the names combined with a '.' delimiter.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.op_Implicit(WithoutHaste.DataFiles.DotNet.DotNetQualifiedName)~System.String">
            <summary>Returns dot notation of namespaces and local name.</summary>
            <example>A.B.C.LocalName</example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetQualifiedName.ToString">
            <summary>Returns dot notation of namespaces and local name.</summary>
            <example>A.B.C.LocalName</example>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.Utilities.CountPreceedingRepeatedChars(System.String,System.Int32,System.Char)">
            <summary>
            Returns the number of sequential characters that all match the selected character, working backwards from the starting index.
            </summary>
            <example>
            ("abcDDDefg", 5, 'D') returns 3 
            ("abcDDDefg", 4, 'D') returns 2 
            </example>
            <param name="text"></param>
            <param name="startIndex">First index checked for <paramref name="searchChar"/>.</param>
            <param name="searchChar"></param>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.Utilities.RemoveOuterBraces(System.String)">
            <summary>
            Removes outer matched pairs of braces from string.
            Only changes string if first and last characters are a matched pair of braces.
            Supports {}, [], (), and <![CDATA[<>]]>
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.Utilities.SplitIgnoreNested(System.String,System.Char)">
            <summary>
            Split <paramref name="text"/> on the <paramref name="delimiter"/> 
            but do not split if <paramref name="delimiter"/> is nested within matched braces.
            Support braces: {}, [], (), and <![CDATA[<>]]>.
            </summary>
            <remarks>
            Returns empty string for empty matches.
            </remarks>
            <example>
            input "A,B{c,d},E[f,g,h]" returns ["A", "B{c,d}", "E[f,g,h]"]
            </example>
            <exception cref="T:WithoutHaste.DataFiles.StringFormatException">Mismatched open/close braces.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.Utilities.TrimAllowOneSpace(System.String)">
            <summary>
            Trims leading and trailing whitespaces. Will leave one leading and one trailing space, but won't add them.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile">
            <summary>
            Represents a .Net XML documentation file, such as those produced by Visual Studio.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.Extensions">
            <summary>Accepted .Net XML documentation file extensions.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.AssemblyName">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.TypeCount">
            <summary>Returns the full count of types within assembly, including nested types and enums.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.Types">
            <summary>Top-level types in assembly.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.#ctor(System.String)">
            <summary>
            Loads .Net XML documentation from file.
            </summary>
            <param name="filename">Full path, filename, and extension.</param>
            <exception cref="T:System.ArgumentException">Filename is null.</exception>
            <exception cref="T:WithoutHaste.Libraries.FileExtensionException">Unexpected file extension.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Loads .Net XML documentation from XDocument.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.AddAssemblyInfo(System.String)">
            <summary>
            Load additional documentation information from the assembly itself.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.ResolveGenericTypeNameConflicts">
            <summary>
            Ensure that default generic-type names do not conflict with actual types used in assembly.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.DotNet.DotNetDocumentationFile.GetFullListOfLocalNames">
            <summary>
            Collect full list of local names used throughout documentation.
            Includes namespaces, internal types, external types, and members.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WithoutHaste.DataFiles.Excel.ExcelPackageHelper">
            <summary>Extensions for ExcelPackage.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.MIN_ROW_INDEX">
            <summary>Minimum row index in excel.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.MIN_COLUMN_INDEX">
            <summary>Minimum column index in excel.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.MIN_COLUMN_CHAR">
            <summary>Minimum column character in excel.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AddWorksheet(OfficeOpenXml.ExcelPackage,System.String)">
            <summary>
            Add a new Worksheet to an ExcelPackage.
            </summary>
            <param name="excelPackage"></param>
            <param name="name">The name of the Worksheet.</param>
            <returns>The new Worksheet.</returns>
            <exception cref="T:System.ArgumentException">ExcelPackage cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetWorksheet(OfficeOpenXml.ExcelPackage,System.String)">
            <summary>
            Searches the ExcelPackage for a Worksheet by name.
            </summary>
            <param name="excelPackage"></param>
            <param name="name">The name of the Worksheet.</param>
            <returns>The Worksheet, or null.</returns>
            <exception cref="T:System.ArgumentException">ExcelPackage cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.String})">
            <duplicate cref="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Object})" />
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Int32})">
            <duplicate cref="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Object})" />
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Decimal})">
            <duplicate cref="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Object})" />
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.AppendRow(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.List{System.Object})">
            <summary>
            Add a new row of data to the end of the Worksheet.
            </summary>
            <param name="worksheet"></param>
            <param name="values">The data values for the row.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Values list cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetRow(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Returns all the values from one row, specified by the 0-indexed row number.
            </summary>
            <param name="worksheet"></param>
            <param name="row">Row number, starting at 1.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Row index out of range.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.SetColumnByIndex(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Set an entire column of values at once.
            </summary>
            <param name="worksheet"></param>
            <param name="column">Integer index of column, starting at 1.</param>
            <param name="values">Data values for the column.</param>
            <param name="skipFirstRow">If true, values[0] is applied to row 2 instead of 1. Intended for indicating the first row is for headers.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Values list cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.SetColumnByHeader(OfficeOpenXml.ExcelWorksheet,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Set an entire column of values at once.
            </summary>
            <param name="worksheet"></param>
            <param name="header">Header value of column.</param>
            <param name="values">Data values for the column. Should not include the header.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Values list cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.SetColumnByChar(OfficeOpenXml.ExcelWorksheet,System.String,System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Set an entire column of values at once.
            </summary>
            <param name="worksheet"></param>
            <param name="column">Character name of column. Example: "A", "Z", "AA".</param>
            <param name="values">Data values for the column.</param>
            <param name="skipFirstRow">If true, values[0] is applied to row 2 instead of 1. Intended for indicating the first row is for headers.</param>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Values list cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetColumnCharForHeader(OfficeOpenXml.ExcelWorksheet,System.String)">
            <summary>
            Searches first row for a particular value.
            </summary>
            <param name="worksheet"></param>
            <param name="header">Header value.</param>
            <returns>Character name of the header's column, or null. Example: "A", "Z", "AA".</returns>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">No header row found.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetColumnByHeader(OfficeOpenXml.ExcelWorksheet,System.String)">
            <summary>
            Returns all the values from one column, specified by the header value.
            </summary>
            <param name="worksheet"></param>
            <param name="header"></param>
            <returns>List of data values, not including the header. Includes all cells to the bottom of the Worksheet.</returns>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetColumnByIndex(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Boolean)">
            <summary>
            Returns all values from one column, specified by the integer index of the column.
            </summary>
            <param name="worksheet"></param>
            <param name="column">Integer index of column, starting at 1.</param>
            <param name="skipFirstRow">If true, the first value in the column is not included. Intended for skipping the header value.</param>
            <returns>List of data values. Includes all cells to the bottom of the Worksheet.</returns>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.GetColumnByChar(OfficeOpenXml.ExcelWorksheet,System.String,System.Boolean)">
            <summary>
            Returns all values from one column, specified by the character name of the column.
            </summary>
            <param name="worksheet"></param>
            <param name="column">Character name of column. Example: "A", "Z", "AA".</param>
            <param name="skipFirstRow">If true, the first value in the column is not included. Intended for skipping the header value.</param>
            <returns>List of data values. Includes all cells to the bottom of the Worksheet.</returns>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.CountRows(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Returns the number of rows in the Worksheet.
            </summary>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.CountColumns(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Returns the number of columns in the Worksheet.
            </summary>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.CountWorksheets(OfficeOpenXml.ExcelPackage)">
            <summary>
            Returns the number of Worksheets in the ExcelPacakge.
            </summary>
            <exception cref="T:System.ArgumentException">ExcelPackage cannot be null.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.ColumnChar(System.Int32)">
            <summary>
            Convert column integer index to character index.
            </summary>
            <example>1 becomes A</example>
            <example>26 becomes Z</example>
            <example>27 becomes AA</example>
            <param name="columnNumber">1-based index of column</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.ExcelPackageHelper.Clear(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Remove all rows and columns from Worksheet.
            </summary>
            <exception cref="T:System.ArgumentException">Worksheet cannot be null.</exception>
        </member>
        <member name="T:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile">
            <summary>
            Building a Microsoft Excel 2003 Xml file with XmlDocument.
            </summary>
            <example>
            Format:
            <code><![CDATA[
            <? xml version="1.0" encoding="UTF-8"?>
            <? mso-application progid="Excel.Sheet" ?>
            <Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" 
              xmlns:c="urn:schemas-microsoft-com:office:component:spreadsheet" 
              xmlns:html="http://www.w3.org/TR/REC-html40" 
              xmlns:o="urn:schemas-microsoft-com:office:office" 
              xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" 
              xmlns:x="urn:schemas-microsoft-com:office:excel" 
              xmlns:x2="http://schemas.microsoft.com/office/excel/2003/xml" 
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 
              <ss:Worksheet ss:Name="Sheet1">
                <Table>
                  <Column />
                  <Row>
                    <Cell>
                      <Data>
                        Cell Value
                      </Data>
                    </Cell>
                  </Row>
                </Table>
              </ss:Worksheet>
            </ss:Workbook>
            ]]></code>
            </example>
            <layout methods="keep_order"/>
        </member>
        <member name="P:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.XmlDocument">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.WorkbookNode">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.StylesNode">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.Tables">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.#ctor">
            <summary>
            Sets up a default file containing no Worksheets.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.#ctor(System.String)">
            <summary>
            Load from file.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetTableIndex(System.String)">
            <summary>
            Returns the index of the Table in the Worksheet with the specified title.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddStyle(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a Style. If a Style with the same id already exists, it is overwritten.
            </summary>
            <example>
            <![CDATA[
            <Styles>
              <Style ss:ID="id">
                <childName ss:childNameAttribute="childAttributeValue" />
              </Style>
            </Styles>
            ]]>
            </example>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.RemoveStyle(System.String)">
            <summary>
            Removes a Style.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddWorksheet(System.String)">
            <summary>
            Add a Worksheet to the end of the list of Worksheets, containing an empty Table.
            </summary>
            <param name="title">Worksheet title.</param>
            <returns>The index of the worksheet/table.</returns>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.SetColumnWidths(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set column widths on the specified Table. Overwrites column widths if they were already set.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddHeaderRow(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Adds a Row of header-style Cells to the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddRow(System.Int32,System.Collections.Generic.List{System.Object})">
            <summary>
            Creates Cells of the appropriate type for each value, and adds all Cells to a new Row in the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddRow(System.Int32,System.Collections.Generic.List{System.Xml.XmlNode})">
            <summary>
            Adds all Cells to a new Row in the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddColumns(System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}})">
            <summary>
            Creates Cells for each data values, adds sufficient Rows to the the specified Table to contain all the columns. Add all Cells to the Rows.
            </summary>
            <param name="tableIndex">0-based table index within Workbook.</param>
            <param name="columns">List of columns, each column being a list of values.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.AddColumns(System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{System.Xml.XmlNode}})">
            <summary>
            Adds sufficient Rows to the the specified Table to contain all the columns. Add all Cells to the Rows.
            </summary>
            <param name="tableIndex">0-based table index within Workbook.</param>
            <param name="columns">List of columns, each column being a list of "Cell" tags.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetRowValues(System.Int32,System.Int32)">
            <summary>
            Returns a list of values from the Cells in the specified Row.
            </summary>
            <param name="tableIndex">Zero-based index of Table in Workbook.</param>
            <param name="rowIndex">Zero-based index of Row in Table.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetRowCount(System.Int32)">
            <summary>
            Returns the number of Rows in the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetColumnCount(System.Int32)">
            <summary>
            Returns the number of Columns in the specified Table.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetHeaderIndex(System.Int32,System.String)">
            <summary>
            Returns zero-based index of the column with the selected header.
            Returns -1 if header is not found.
            </summary>
            <remarks>Only the first row in the table is searched for the header.</remarks>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetHeaders(System.Int32)">
            <summary>
            Returns all the header values from the first row.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetColumnValues(System.Int32,System.String)">
            <summary>
            Returns a list of values from the Cells in the column with the specified header.
            </summary>
            <remarks>The first row is skipped as the header row.</remarks>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GetColumnValues(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a list of values from the cells in the selected column.
            </summary>
            <param name="tableIndex">0-based table index within Workbook.</param>
            <param name="columnIndex">0-based column index within Table.</param>
            <param name="firstRowIsHeader">If true, the first row of the table is skipped.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.Save(System.String)">
            <summary>Save file.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateWidthAttribute(System.Int32)">
            <summary>Returns an ss:Width attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateStyleIdAttribute(System.String)">
            <summary>Returns an ss:StyleID attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateNameAttribute(System.String)">
            <summary>Returns an ss:Name attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateStringTypeAttribute">
            <summary>Returns an ss:Type="String" attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateNumberTypeAttribute">
            <summary>Returns an ss:Type="Number" attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateDateTypeAttribute">
            <summary>Returns an ss:Type="DateTime" attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateTypeAttribute(System.String)">
            <summary>Returns a custom ss:Type attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateAttribute(System.String,System.String,System.String)">
            <summary>Returns a custom attribute.</summary>
            <remarks>Only namespace URIs known to this format can be referenced.</remarks>
            <exception cref="T:System.ArgumentException">Unknown namespace URI prefix.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateAttribute(System.String,System.String,System.String,System.String)">
            <summary>Returns a custom attribute.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateCell(System.Object)">
            <summary>
            Creates a Cell tag of the appropriate type containing the specified data.
            Supports DateTime cells, Number cells, and Text cells. All unknown types are converted to strings.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateDateCell(System.DateTime)">
            <summary>Creates a Cell tag containing the specified date.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateNumberCell(System.Int32)">
            <summary>Generate a Cell tag containing the specified number.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateHeaderCell(System.String)">
            <summary>Generate a header Cell tag containing the specified text.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateParagraphCell(System.String)">
            <summary>Generate a paragraph Cell tag containing the specified text.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateTextCell(System.String)">
            <summary>Generate a paragraph Cell tag containing the specified text.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateEmptyCell">
            <summary>Generate an empty Cell tag.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.GenerateTextCell(System.String,System.String)">
            <summary>Generate a Cell tag containing the specified text.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Excel.MSExcel2003XmlFile.DateToString(System.DateTime)">
            <summary>Converts a date to the expected string format.</summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.StringFormatException">
            <summary>Badly formatted string.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.StringFormatException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.XmlFormatException">
            <summary>
            Badly formatted xml, or unexpected xml.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.XmlFormatException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.XmlNodeException">
            <summary>
            Exceptions related to XmlNode objects.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.XmlNodeException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Info">
            <summary>
            Retrieves version information.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Info.GetVersion">
            <summary>
            Returns the version of this library.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Info.GetDependencyVersions">
            <summary>
            Returns the versions of any special libraries this one relies on.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.IMarkdownInLine">
            <summary>
            Represents a markdown element that can be included within a MarkdownLine (i.e. within text).
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.IMarkdownInList">
            <summary>
            Represents a markdown element that can be added to a MarkdownList.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.IMarkdownInSection">
            <summary>
            Represents a markdown element that can be included within a MarkdownSection.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.IMarkdownInSection.ToMarkdown">
            <summary>
            Return markdown-formatted text.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.IMarkdownIsBlock">
            <summary>
            Represents a Markdown element that ends with a double endline.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownCode">
            <summary>
            Represents inline code or CDATA.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Markdown.MarkdownCode.Text">
            <summary>
            Full text of code.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownCode.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownCode.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownCodeBlock">
            <summary>
            Represents a code block or CDATA block.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Markdown.MarkdownCodeBlock.Text">
            <summary>
            Full text of code, with endline characters between lines.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Markdown.MarkdownCodeBlock.Language">
            <summary>
            Language tag supported by highlight.js for syntax highlighting.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownCodeBlock.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownCodeBlock.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownFile">
            <summary>
            Represents a markdown file.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Markdown.MarkdownFile.Extensions">
            <summary>Accepted markdown file extensions.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownFile.#ctor">
            <summary>
            Create an empty markdown file.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownFile.#ctor(System.String)">
            <summary>
            Load markdown from file.
            </summary>
            <param name="filename">Full path, filename, and extension.</param>
            <exception cref="T:WithoutHaste.Libraries.FileExtensionException">Unexpected file extension.</exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownFile.AddSection(System.String)">
            <summary>
            Creates new section and adds it to the end of the file. Defaults to depth 1.
            </summary>
            <param name="header">Section header</param>
            <returns>The new section</returns>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownFile.AddSection(WithoutHaste.DataFiles.Markdown.MarkdownSection)">
            <summary>
            Adds existing section to the end of this file. Depths are not updated.
            </summary>
            <param name="section">Existing section.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownFile.ToMarkdown">
            <summary>
            Returns full markdown text for file, formatted for legibility.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownInlineLink">
            <summary>
            Represents markdown inline-style link.
            </summary>
            <example>Displays as: The quick brown fox [jumped over](https://www.google.com) the lazy dog.</example>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownInlineLink.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownInlineLink.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownLine">
            <summary>
            Represents one line of text that will end in a line break.
            </summary>
            <remarks>Do not include the trailing white space or endline character.</remarks>
            <example>Displays as: The quick brown fox.  \\n</example>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownLine.Elements">
            <summary>
            Ordered inline elements that make up this line.
            </summary>
            <remarks>Expect mostly one plain text element.</remarks>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownLine.IsEmpty">
            <summary>
            True when there are no elements in the line.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Markdown.MarkdownLine.elements">
            <summary>
            Ordered inline elements that make up this line.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.#ctor(WithoutHaste.DataFiles.Markdown.IMarkdownInLine[])">
            <summary>
            Initialize line with any number of elements.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.#ctor(System.Collections.Generic.List{WithoutHaste.DataFiles.Markdown.IMarkdownInLine})">
            <summary>
            Initialize line with any number of elements.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.#ctor(System.String)">
            <summary>
            Initialize line with one MarkdownText element.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.Add(System.String)">
            <summary>
            Add a new MarkdownText containing the text to the end of the line.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.Add(WithoutHaste.DataFiles.Markdown.IMarkdownInLine)">
            <summary>
            Add an element to the end of the line.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.Add(System.Collections.Generic.List{WithoutHaste.DataFiles.Markdown.IMarkdownInLine})">
            <summary>
            Add elements to the end of the line.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.Add(WithoutHaste.DataFiles.Markdown.IMarkdownInLine[])">
            <summary>
            Add elements to the end of the line.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.Prepend(System.String)">
            <summary>
            Add a new MarkdownText containing the text to the beginning of the line.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.Preprend(WithoutHaste.DataFiles.Markdown.IMarkdownInLine)">
            <summary>
            Add an element to the beginning of the line.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLine.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownLink">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownLink.Text">
            <summary>Plain text of link.</summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownLink.Url">
            <summary>Url of target.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLink.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownLink.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownList">
            <summary>
            Represents a markdown list.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownList.Depth">
            <summary>
            0-indexed nesting depth of list.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownList.IsNumbered">
            <summary>
            True means the list will be numbered. 
            False means the list will be bulleted.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownList.Length">
            <summary>
            The length of the list. Nested lists count as 1 each.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownList.Item(System.Int32)">
            <summary>
            Get an element from the list by 0-based index.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownList.#ctor(System.Boolean)">
            <summary>
            Creates an empty list.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownList.#ctor(System.Boolean,WithoutHaste.DataFiles.Markdown.IMarkdownInList[])">
            <summary>
            Creates a list of the specified MarkdownLines.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownList.#ctor(System.Boolean,WithoutHaste.DataFiles.Markdown.IMarkdownInLine[])">
            <summary>
            Creates a list MarkdownLines containing the specified IMarkdownInline elements.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownList.Add(WithoutHaste.DataFiles.Markdown.IMarkdownInList)">
            <summary>
            Adds element to the end of the list.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownList.Add(WithoutHaste.DataFiles.Markdown.IMarkdownInLine)">
            <summary>
            Adds new MarkdownLine containing the specified element to the end of the list.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownList.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownParagraph">
            <summary>
            Represents one paragraph of text that will end in a double line break.
            </summary>
            <remarks>Do not include trailing white space or endline characters.</remarks>
            <example>Displays as: The quick brown fox.\\n\\n</example>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownParagraph.#ctor(WithoutHaste.DataFiles.Markdown.IMarkdownInLine[])">
            <summary>
            Initialize paragraph with any number of elements.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownParagraph.#ctor(System.Collections.Generic.List{WithoutHaste.DataFiles.Markdown.IMarkdownInLine})">
            <summary>
            Initialize paragraph with any number of elements.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownParagraph.#ctor(System.String)">
            <summary>
            Initialize paragraph with one MarkdownText element.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownParagraph.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownSection">
            <summary>
            Represents a header and all contents until the next header of the same depth.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownSection.Depth">
            <summary>
            0-indexed nesting depth of section.
            </summary>
            <example>"# Header" is depth 1</example>
            <example>"## Header" is depth 2</example>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownSection.Header">
            <summary>
            Displayed header text.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownSection.Elements">
            <summary>All markdown elements within section.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.#ctor(System.String,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddSection(System.String)">
            <summary>
            Creates new section and adds it to the end of this section. Defaults to depth of parent + 1.
            </summary>
            <param name="header">Section header</param>
            <returns>The new section</returns>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddSection(WithoutHaste.DataFiles.Markdown.MarkdownSection)">
            <summary>
            Adds existing section to the end of this section. Depths are updated.
            </summary>
            <param name="section">Existing section.</param>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.Add(WithoutHaste.DataFiles.Markdown.IMarkdownInSection)">
            <summary>
            Adds the element to the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.Add(WithoutHaste.DataFiles.Markdown.IMarkdownInSection[])">
            <summary>
            Adds all the elements to the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.Add(System.Collections.Generic.List{WithoutHaste.DataFiles.Markdown.IMarkdownInSection})">
            <summary>
            Adds all the elements to the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddInLine(WithoutHaste.DataFiles.Markdown.IMarkdownInLine)">
            <summary>
            Adds the element in a new MarkdownLine at the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddInLine(System.String)">
            <summary>
            Adds the text in a new MarkdownLine at the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddInLine(WithoutHaste.DataFiles.Markdown.IMarkdownInLine[])">
            <summary>
            Adds the elements in a new MarkdownLine at the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddInLine(System.Collections.Generic.List{WithoutHaste.DataFiles.Markdown.IMarkdownInLine})">
            <summary>
            Adds the elements in a new MarkdownLine at the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddInParagraph(WithoutHaste.DataFiles.Markdown.IMarkdownInLine)">
            <summary>
            Adds the element in a new MarkdownParagraph at the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddInParagraph(WithoutHaste.DataFiles.Markdown.IMarkdownInLine[])">
            <summary>
            Adds the elements in a new MarkdownParagraph at the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddInParagraph(System.Collections.Generic.List{WithoutHaste.DataFiles.Markdown.IMarkdownInLine})">
            <summary>
            Adds the elements in a new MarkdownParagraph at the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.AddInParagraph(System.String)">
            <summary>
            Adds the text in a new MarkdownParagraph at the end of this section.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.EndsWith(System.Type)">
            <summary>
            Returns true if the last element in the section has the specified type.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownSection.ToMarkdown(System.String)">
            <summary>
            Return markdown-formatted text, taking the previous text of the file into account.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownTable">
            <summary>
            Represents a markdown table.
            </summary>
            <remarks>
            Markdown requires each table to have exactly 1 header row, so the first row is assumed to be the header.
            </remarks>
        </member>
        <member name="F:WithoutHaste.DataFiles.Markdown.MarkdownTable.MINIMUM_COLUMN_WIDTH">
            <summary>Minimum column width is 3 to allow for minimum "---" contents indicating header/data divider.</summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Markdown.MarkdownTable.Rows">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownTable.#ctor(System.Collections.Generic.List{WithoutHaste.DataFiles.Markdown.MarkdownTableRow})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownTable.#ctor(WithoutHaste.DataFiles.Markdown.MarkdownTableRow[])">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownTable.ToMarkdown">
            <summary>
            Return markdown-formatted text.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownTable.GetColumnWidths">
            <summary>
            Returns the width of the widest cell in each column.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownTableRow">
            <summary>
            Represents one row in a Markdown table.
            </summary>
        </member>
        <member name="F:WithoutHaste.DataFiles.Markdown.MarkdownTableRow.Cells">
            <summary>List of the cells in the row.</summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownTableRow.#ctor(System.Collections.Generic.List{System.String})">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownTableRow.ToMarkdown(System.Collections.Generic.List{System.Int32})">
            <summary>
            Return markdown-formatted text.
            </summary>
            <remarks>Column widths are padded an additional 1 space on left and right, per Markdown formatting.</remarks>
            <remarks>Line feed, new line, and tab characters are removed.</remarks>
            <exception cref="T:System.ArgumentException">ColumnWidths cannot be null or shorter than the row.</exception>
        </member>
        <member name="T:WithoutHaste.DataFiles.Markdown.MarkdownText">
            <summary>
            Represents plain text.
            </summary>
        </member>
        <member name="P:WithoutHaste.DataFiles.Markdown.MarkdownText.Text">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownText.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.MarkdownText.ToMarkdown">
            <inheritdoc />
        </member>
        <member name="M:WithoutHaste.DataFiles.Markdown.Utilities.EnsureTwoEndlines(System.String)">
            <summary>
            Ensure that string is null or ends with two end line characters.
            Does not add unneccessary characters.
            </summary>
        </member>
        <member name="T:WithoutHaste.DataFiles.XmlDocumentHelper">
            <summary>
            Generic XmlDocument utilities.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.XmlDocumentHelper.Validate(System.Xml.XmlNode,System.String)">
            <summary>
            Throw exception if XmlNode does not exist, or does not have the expected LocalName.
            </summary>
            <exception cref="T:WithoutHaste.DataFiles.XmlNodeException"></exception>
        </member>
        <member name="M:WithoutHaste.DataFiles.XmlDocumentHelper.XmlToString(System.Xml.XmlDocument)">
            <summary>
            Returns a string containing the entire contents of the XmlDocument.
            </summary>
        </member>
        <member name="M:WithoutHaste.DataFiles.XmlDocumentHelper.XmlToString(System.Xml.XmlNode)">
            <summary>
            Returns a string containing the entire contents of the XmlNode.
            </summary>
        </member>
    </members>
</doc>
